---
import { getCollection, type CollectionEntry } from 'astro:content';
import MainLayout from '../../../layouts/MainLayout.astro';
import { Card } from '@docs/ui/components';
import type { LocaleKey } from '@docs/i18n/locales';
import { translate } from '@docs/i18n/utils';
import { getLegacyProjectConfig, initializeConfig } from '../../../lib/config';

// 型定義
type DocEntry = CollectionEntry<'docs'>;

export async function getStaticPaths() {
  console.log('[Index getStaticPaths] Starting...');
  
  // getStaticPaths内で設定を初期化
  await initializeConfig();
  const projectConfig = await getLegacyProjectConfig();
  
  const allVersions = projectConfig.versions.map(v => v.id);
  const allLangs = projectConfig.supportedLangs;
  
  const paths = [];
  
  // 利用可能なバージョンと言語の組み合わせのみを生成
  const docs = await getCollection('docs');
  const availableCombinations = new Set<string>();
  
  docs.forEach(doc => {
    const pathParts = doc.slug.split('/');
    if (pathParts.length >= 2) {
      const version = pathParts[0];
      const lang = pathParts[1];
      availableCombinations.add(`${version}:${lang}`);
    }
  });
  
  for (const lang of allLangs) {
    for (const version of allVersions) {
      const key = `${version}:${lang}`;
      if (availableCombinations.has(key)) {
        console.log(`[Index getStaticPaths] Adding path: version=${version}, lang=${lang}`);
        paths.push({
          params: { version, lang },
          props: { version, lang }
        });
      } else {
        console.log(`[Index getStaticPaths] Skipping unavailable combination: version=${version}, lang=${lang}`);
      }
    }
  }
  
  console.log(`[Index getStaticPaths] Generated ${paths.length} index paths`);
  return paths;
}

const { version: versionParam, lang: langParam } = Astro.props;
const version = versionParam || 'v1';
const lang = (langParam || 'en') as LocaleKey;

console.log(`[Index Render] Processing version=${version}, lang=${lang}`);

// 設定を再度初期化（プロパティセクション）
await initializeConfig();
const projectConfig = await getLegacyProjectConfig();

// GitHub Pagesのベースパス
const baseUrl = projectConfig.baseUrl;

// 指定されたバージョンと言語のドキュメントを取得
const docs = await getCollection('docs', (entry: DocEntry) => {
  const isMatch = entry.slug.startsWith(`${version}/${lang}/`);
  if (isMatch) {
    console.log(`[Index Render] Found matching doc: ${entry.slug}`);
  }
  return isMatch;
});

console.log(`[Index Render] Found ${docs.length} documents for ${version}/${lang}`);

// カテゴリごとにドキュメントを整理
const categories = docs.reduce((acc: Record<string, DocEntry[]>, doc: DocEntry) => {
  // スラグからカテゴリを抽出（例: v2/ja/01-guide/getting-started → 01-guide）
  const parts = doc.slug.split('/');
  if (parts.length >= 3) {
    const category = parts[2]; // 3番目の部分がカテゴリ (01-guide)
    const categoryName = category.replace(/^\d+-/, ''); // 番号プレフィックスを削除 (guide)
    
    if (!acc[categoryName]) {
      acc[categoryName] = [];
    }
    acc[categoryName].push(doc);
    console.log(`[Index Render] Added ${doc.slug} to category ${categoryName}`);
  }
  return acc;
}, {});

// カテゴリごとにドキュメントを順序で並べ替え
Object.keys(categories).forEach(category => {
  categories[category].sort((a: DocEntry, b: DocEntry) => {
    // スラグからファイル番号を抽出してソート
    const getFileNumber = (slug: string) => {
      const parts = slug.split('/');
      const lastPart = parts[parts.length - 1];
      const match = lastPart.match(/^(\d+)-/);
      return match ? parseInt(match[1]) : 999;
    };
    
    const orderA = a.data.order || getFileNumber(a.slug);
    const orderB = b.data.order || getFileNumber(b.slug);
    return orderA - orderB;
  });
});

// カテゴリの表示名マッピング
const categoryNames: Record<string, string> = {
  'guide': translate('docs.guide', lang),
  'components': translate('navigation.components', lang),
  'advanced': translate('docs.advanced', lang),
  'reference': translate('docs.reference', lang),
  'api': translate('navigation.api', lang),
  'examples': translate('docs.examples', lang)
};
---

<MainLayout title={`${translate('docs.documentation', lang)} (${version})`} lang={lang} version={version}>
  <div class="container">
    <h1 class="page-title">{translate('docs.documentation', lang)} - {version}</h1>
    
    <div class="category-list">
      {Object.keys(categories).map(category => (
        <div class="category-item">
          <h2 class="category-title">{categoryNames[category] || category}</h2>
          <div class="doc-grid">
            {categories[category].map((doc: DocEntry) => {
              // スラグからパスを構築 (例: v2/ja/01-guide/01-getting-started → /01-guide/01-getting-started)
              const docPath = doc.slug.split('/').slice(2).join('/');
              const href = `${baseUrl}/${version}/${lang}/${docPath}`;
              
              return (
                <Card
                  title={doc.data.title}
                  href={href}
                >
                  <p class="doc-description">{doc.data.description}</p>
                </Card>
              );
            })}
          </div>
        </div>
      ))}
    </div>
    
    {Object.keys(categories).length === 0 && (
      <div class="empty-state">
        <p>{translate('docs.no_documents', lang)}</p>
      </div>
    )}
  </div>
</MainLayout>

<style>
  .container {
    max-width: 64rem;
    margin: 0 auto;
  }

  .page-title {
    font-size: 1.875rem;
    font-weight: 700;
    margin-bottom: 2rem;
  }

  .category-list {
    display: flex;
    flex-direction: column;
    gap: 3rem;
  }

  .category-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 1rem;
  }

  .doc-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1rem;
  }

  @media (min-width: 768px) {
    .doc-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  .doc-description {
    color: #4b5563;
  }

  :global(.dark) .doc-description {
    color: #9ca3af;
  }

  .empty-state {
    text-align: center;
    padding: 3rem 0;
  }

  .empty-state p {
    color: #4b5563;
  }

  :global(.dark) .empty-state p {
    color: #9ca3af;
  }
</style>