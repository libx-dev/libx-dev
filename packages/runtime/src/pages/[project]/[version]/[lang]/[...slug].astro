---
import { loadRegistry, generateRoutes, generateSidebar, generateOpenGraph } from '@docs/generator';
import DocLayout from '../../../../layouts/DocLayout.astro';
import RelatedDocs from '../../../../components/RelatedDocs.astro';

// Astro getStaticPaths() - ルーティング生成
export async function getStaticPaths() {
  // プロジェクトルートを環境変数から取得（astro.config.mjsで設定）
  const projectRoot = import.meta.env.PROJECT_ROOT;

  // レジストリをプロジェクトルートから読み込み
  const registry = loadRegistry('registry/docs.json', projectRoot);

  // 環境に応じたルーティング生成
  const routes = generateRoutes(registry, {
    env: import.meta.env.MODE || 'production',
    debug: true
  });

  return routes;
}

// Astroから渡されるprops
const {
  docId,
  projectId,
  title,
  summary,
  keywords,
  tags,
  related,
  license,
  contributors,
  contentPath,
  visibility,
  status
} = Astro.props;

// URLパラメータ
const { project, version, lang, slug } = Astro.params;

// MDXコンテンツの読み込み
// Vite Aliasを使用してMDXファイルを動的にimport
let Content: any = null;
let mdxError: string | null = null;

try {
  // @appsエイリアスを使用してMDXファイルを読み込む
  // import.meta.glob()でパターンマッチング
  const mdxModules = import.meta.glob('@apps/*/src/content/docs/**/*.mdx');

  // デバッグログ
  console.log(`[MDX Import] Looking for: project=${project}, version=${version}, lang=${lang}, slug=${slug}`);
  console.log(`[MDX Import] Total MDX modules found: ${Object.keys(mdxModules).length}`);

  if (Object.keys(mdxModules).length > 0) {
    console.log(`[MDX Import] Sample module paths:`, Object.keys(mdxModules).slice(0, 5));
  }

  // slugから実際のファイルパスを構築
  // slug: "guide/getting-started"
  // 実際のファイル: "@apps/sample-docs/src/content/docs/v2/ja/01-guide/01-getting-started.mdx"

  // slugの各セグメントを番号接頭辞付きでマッチング
  const slugSegments = slug.toLowerCase().split('/');

  const matchingKey = Object.keys(mdxModules).find(modulePath => {
    const normalizedPath = modulePath.toLowerCase();

    // プロジェクト、バージョン、言語が一致するか確認
    if (!normalizedPath.includes(`/${project}/`) ||
        !normalizedPath.includes(`/${version}/`) ||
        !normalizedPath.includes(`/${lang}/`)) {
      return false;
    }

    // バージョン/言語以降のパス部分を取得
    const versionLangPattern = `/${version}/${lang}/`;
    const pathIndex = normalizedPath.indexOf(versionLangPattern);
    if (pathIndex === -1) return false;

    const pathPart = normalizedPath.substring(pathIndex + versionLangPattern.length);

    // 番号接頭辞を除去したセグメントを作成
    const pathSegments = pathPart
      .replace(/\.mdx$/, '')  // 拡張子を除去
      .split('/')
      .map(seg => seg.replace(/^\d+-/, ''));  // 番号接頭辞を除去

    // セグメント数が一致するか確認
    if (slugSegments.length !== pathSegments.length) {
      return false;
    }

    // 全セグメントが一致するか確認
    const matches = slugSegments.every((slugSeg, index) => {
      return pathSegments[index] === slugSeg;
    });

    if (matches) {
      console.log(`[MDX Import] Match found: ${modulePath} for slug: ${slug}`);
    }

    return matches;
  });

  if (matchingKey) {
    const module = await mdxModules[matchingKey]();
    Content = module.default || module.Content;
  } else {
    mdxError = `MDXファイルが見つかりません: project=${project}, version=${version}, lang=${lang}, slug=${slug}`;
  }
} catch (error) {
  console.error(`MDXファイルの読み込みに失敗:`, error);
  mdxError = error instanceof Error ? error.message : String(error);
}

// プロジェクトルートを環境変数から取得（astro.config.mjsで設定）
const projectRoot = import.meta.env.PROJECT_ROOT;

// レジストリを再読み込み（サイドバー生成用）
const registry = loadRegistry('registry/docs.json', projectRoot);

// サイドバーを生成
const sidebar = generateSidebar(registry, project, version, lang, {
  env: import.meta.env.MODE || 'production',
  baseUrl: ''
});

// OpenGraphメタデータを生成
const pageUrl = new URL(Astro.url.pathname, Astro.site).toString();
const ogMeta = generateOpenGraph(title, summary, pageUrl, {
  lang,
  siteName: 'LibX Documentation'
});
---

<DocLayout
  title={title}
  summary={summary}
  sidebar={sidebar}
  ogMeta={ogMeta}
  keywords={keywords}
  tags={tags}
  license={license}
  contributors={contributors}
  project={project}
  version={version}
  lang={lang}
>
  {Content ? (
    <!-- MDXコンテンツが正常に読み込まれた場合 -->
    <div class="prose">
      <Content />
    </div>
  ) : (
    <!-- MDXファイルが見つからない場合のフォールバック -->
    <div class="prose">
      <h1>{title}</h1>
      <p class="summary">{summary}</p>

      <div class="error-message">
        <h2>コンテンツを読み込めませんでした</h2>
        <p>{mdxError || 'MDXファイルが見つかりません'}</p>
        <details>
          <summary>デバッグ情報</summary>
          <dl>
            <dt>ドキュメントID:</dt>
            <dd><code>{docId}</code></dd>
            <dt>プロジェクト:</dt>
            <dd><code>{project}</code></dd>
            <dt>バージョン:</dt>
            <dd><code>{version}</code></dd>
            <dt>言語:</dt>
            <dd><code>{lang}</code></dd>
            <dt>スラッグ:</dt>
            <dd><code>{slug}</code></dd>
            <dt>レジストリのパス:</dt>
            <dd><code>{contentPath}</code></dd>
          </dl>
        </details>
      </div>
    </div>
  )}

  <!-- 関連ドキュメント -->
  {related && related.length > 0 && (
    <RelatedDocs
      relatedDocIds={related}
      projectId={projectId}
      currentLang={lang}
      currentVersion={version}
    />
  )}
</DocLayout>

<style>
  .prose {
    max-width: 800px;
    margin: 0 auto;
    line-height: 1.75;
  }

  .prose :global(h1) {
    font-size: 2.25rem;
    font-weight: 700;
    margin-bottom: 1rem;
    color: var(--color-text);
  }

  .prose :global(h2) {
    font-size: 1.875rem;
    font-weight: 600;
    margin-top: 2.5rem;
    margin-bottom: 1rem;
    color: var(--color-text);
  }

  .prose :global(h3) {
    font-size: 1.5rem;
    font-weight: 600;
    margin-top: 2rem;
    margin-bottom: 0.75rem;
    color: var(--color-text);
  }

  .prose :global(p) {
    margin-bottom: 1.25rem;
    color: var(--color-secondary);
  }

  .prose :global(code) {
    background-color: var(--color-code-bg);
    padding: 0.2rem 0.4rem;
    border-radius: 0.25rem;
    font-family: 'Courier New', monospace;
    font-size: 0.875em;
  }

  .prose :global(pre) {
    background-color: var(--color-code-bg);
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin: 1.5rem 0;
  }

  .prose :global(pre code) {
    background: none;
    padding: 0;
  }

  .summary {
    font-size: 1.125rem;
    color: #6b7280;
    margin-bottom: 2rem;
  }

  .error-message {
    padding: 2rem;
    background-color: #fef2f2;
    border: 1px solid #fecaca;
    border-radius: 0.5rem;
    margin: 2rem 0;
  }

  .error-message h2 {
    color: #dc2626;
    font-size: 1.25rem;
    margin-bottom: 1rem;
  }

  .error-message p {
    color: #991b1b;
    margin-bottom: 1rem;
  }

  .error-message details {
    margin-top: 1.5rem;
  }

  .error-message summary {
    cursor: pointer;
    font-weight: 600;
    color: #991b1b;
    padding: 0.5rem;
    background-color: #fee2e2;
    border-radius: 0.25rem;
  }

  .error-message dl {
    margin-top: 1rem;
    padding: 1rem;
    background-color: white;
    border-radius: 0.25rem;
  }

  .error-message dt {
    font-weight: 600;
    margin-top: 0.75rem;
    color: #374151;
  }

  .error-message dd {
    margin-left: 0;
    color: #6b7280;
  }

  .error-message code {
    background-color: #e5e7eb;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-family: monospace;
    font-size: 0.875rem;
  }

  .related-docs {
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid var(--color-border);
  }

  .related-docs h2 {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 1rem;
    color: var(--color-text);
  }

  .related-docs ul {
    list-style: disc;
    padding-left: 1.5rem;
  }

  .related-docs li {
    margin-bottom: 0.5rem;
    color: var(--color-secondary);
  }
</style>
