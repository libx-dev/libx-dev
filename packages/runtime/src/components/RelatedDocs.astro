---
/**
 * RelatedDocs - 関連ドキュメント表示コンポーネント
 * レジストリから関連ドキュメント情報を取得して、カード形式で表示します
 */
import { loadRegistry } from '@docs/generator';
import { Card } from '@docs/ui/components';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// ファイルパスからプロジェクトルートを取得
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const projectRoot = join(__dirname, '../../../../../..');

interface Props {
  /** 関連ドキュメントのID配列 */
  relatedDocIds: string[];
  /** 現在のプロジェクトID */
  projectId: string;
  /** 現在の言語 */
  currentLang: string;
  /** 現在のバージョン */
  currentVersion: string;
}

const { relatedDocIds, projectId, currentLang, currentVersion } = Astro.props;

// 関連ドキュメントがない場合は何も表示しない
if (!relatedDocIds || relatedDocIds.length === 0) {
  return null;
}

// レジストリから関連ドキュメント情報を取得
const registry = loadRegistry('registry/docs.json', projectRoot);
const project = registry.projects.find(p => p.id === projectId);

if (!project) {
  console.warn(`Project not found: ${projectId}`);
  return null;
}

// 関連ドキュメントの情報を取得
const relatedDocs = relatedDocIds
  .map(docId => {
    const doc = project.documents.find(d => d.id === docId);
    if (!doc) {
      console.warn(`Document not found: ${docId} in project ${projectId}`);
      return null;
    }

    return {
      id: doc.id,
      slug: doc.slug,
      title: doc.title[currentLang] || doc.title['en'] || doc.title[Object.keys(doc.title)[0]],
      summary: doc.summary[currentLang] || doc.summary['en'] || doc.summary[Object.keys(doc.summary)[0]],
      tags: doc.tags || [],
      href: `/${projectId}/${currentVersion}/${currentLang}/${doc.slug}`
    };
  })
  .filter(doc => doc !== null);

// ドキュメントが見つからなかった場合は何も表示しない
if (relatedDocs.length === 0) {
  return null;
}
---

<section class="related-docs">
  <h2>関連ドキュメント</h2>
  <div class="related-grid">
    {relatedDocs.map(doc => (
      <a
        href={doc.href}
        class="related-card"
        data-doc-id={doc.id}
      >
        <div class="card-content">
          <h3>{doc.title}</h3>
          <p>{doc.summary}</p>
          {doc.tags && doc.tags.length > 0 && (
            <div class="tags">
              {doc.tags.map(tag => (
                <span class="tag">{tag}</span>
              ))}
            </div>
          )}
        </div>
        <div class="card-arrow">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="5" y1="12" x2="19" y2="12"></line>
            <polyline points="12 5 19 12 12 19"></polyline>
          </svg>
        </div>
      </a>
    ))}
  </div>
</section>

<style>
  .related-docs {
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid var(--color-border);
  }

  .related-docs h2 {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 1.5rem;
    color: var(--color-text);
  }

  .related-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
  }

  .related-card {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.5rem;
    border: 1px solid var(--color-border);
    border-radius: 0.5rem;
    text-decoration: none;
    transition: all 0.2s ease;
    background-color: var(--color-bg);
  }

  .related-card:hover {
    border-color: var(--color-primary);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    transform: translateY(-2px);
  }

  .card-content {
    flex: 1;
  }

  .related-card h3 {
    font-size: 1.125rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--color-text);
  }

  .related-card p {
    font-size: 0.875rem;
    color: var(--color-secondary);
    margin-bottom: 1rem;
    line-height: 1.5;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .tag {
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    background-color: var(--color-border);
    border-radius: 0.25rem;
    color: var(--color-text);
    font-weight: 500;
  }

  .card-arrow {
    flex-shrink: 0;
    margin-left: 1rem;
    color: var(--color-primary);
    opacity: 0.6;
    transition: opacity 0.2s ease, transform 0.2s ease;
  }

  .related-card:hover .card-arrow {
    opacity: 1;
    transform: translateX(4px);
  }

  @media (max-width: 768px) {
    .related-grid {
      grid-template-columns: 1fr;
    }
  }
</style>
