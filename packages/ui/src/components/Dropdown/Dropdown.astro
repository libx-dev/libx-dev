---
import { getDropdownScript, getCustomElementScript } from './utils';

interface Props {
  /**
   * ボタンに表示するラベル
   */
  label: string;
  
  /**
   * ボタンの右側に表示するアイコン（省略可能）
   */
  icon?: string;
  
  /**
   * ドロップダウンの配置位置（デフォルトは右）
   */
  align?: 'left' | 'right';
  
  /**
   * ドロップダウンの幅（デフォルトは14rem）
   */
  width?: string;
  
  /**
   * 追加のCSSクラス
   */
  class?: string;
  
  /**
   * その他の属性
   */
  [key: string]: any;
}

const {
  label,
  icon = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true"><path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" /></svg>`,
  align = 'right',
  width = '14rem',
  class: className = '',
  ...attrs
} = Astro.props;

// ドロップダウンスクリプトが一度だけ読み込まれるようにフラグを設定
const didRenderDropdownScriptSymbol = Symbol.for('docs:did-render-dropdown-script');
// @ts-expect-error - シンボルを使用して状態を追跡
const shouldRenderDropdownScript = Astro.locals[didRenderDropdownScriptSymbol] !== true;

// スクリプトが一度だけ読み込まれるようにフラグを設定
if (shouldRenderDropdownScript) {
  // @ts-expect-error - シンボルを使用して状態を追跡
  Astro.locals[didRenderDropdownScriptSymbol] = true;
}

// ユニークなIDを生成
const buttonId = `dropdown-button-${Math.random().toString(36).substring(2, 11)}`;
const menuId = `dropdown-menu-${Math.random().toString(36).substring(2, 11)}`;
---

{/* ドロップダウンコンポーネントのスクリプト */}
{shouldRenderDropdownScript && (
  <Fragment>
    <script is:inline set:html={getCustomElementScript()} />
    <script is:inline set:html={getDropdownScript()} />
  </Fragment>
)}

<docs-dropdown class:list={['dropdown', className]} {...attrs}>
  {/* ドロップダウンボタン */}
  <div>
    <button 
      type="button" 
      class="dropdown-button"
      id={buttonId}
      aria-expanded="false"
      aria-haspopup="true"
      aria-controls={menuId}
      data-dropdown-button
    >
      <span class="dropdown-label">{label}</span>
      <span class="dropdown-icon" set:html={icon} />
    </button>
  </div>
  
  {/* ドロップダウンメニュー (初期状態では非表示) */}
  <div 
    class="dropdown-menu hidden"
    id={menuId}
    role="menu"
    aria-orientation="vertical"
    aria-labelledby={buttonId}
    tabindex="-1"
    data-dropdown-menu
    data-align={align}
    style={`width: ${width};`}
  >
    <div class="dropdown-content" role="none">
      <slot />
    </div>
  </div>
</docs-dropdown>

<style define:vars={{ align, width }}>
  .dropdown {
    position: relative;
    display: inline-block;
    text-align: left;
  }

  .dropdown-button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    border-radius: 0.375rem;
    border: 1px solid var(--color-border-default); /* Updated */
    box-shadow: var(--shadow-sm); /* Updated */
    padding: 0.5rem 1rem;
    background-color: var(--color-bg-secondary); /* Updated */
    font-size: var(--font-size-sm); /* Updated */
    font-weight: 500;
    color: var(--color-text-primary); /* Updated */
    transition: background-color 0.2s, border-color 0.2s, box-shadow 0.2s;
    height: 2.5rem;
  }

  .dropdown-button:hover {
    background-color: var(--color-bg-tertiary); /* Updated */
  }

  .dropdown-button:focus {
    outline: none;
    box-shadow: 0 0 0 2px var(--color-bg-tertiary), 0 0 0 4px var(--color-brand-primary); /* Updated */
  }

  .dropdown-label {
    flex: 1;
    text-align: left;
  }

  .dropdown-icon {
    display: flex;
    width: 1rem;
    height: 1rem;
    margin-left: 0.5rem;
  }

  .dropdown-menu {
    position: absolute;
    z-index: 10;
    margin-top: 0.5rem;
    border-radius: 0.375rem;
    box-shadow: var(--shadow-lg); /* Updated */
    background-color: var(--color-bg-secondary); /* Updated */
    border: 1px solid var(--color-border-default); /* Updated */
    transform-origin: top var(--align, right);
  }

  .dropdown-menu[data-align="left"] {
    left: 0;
  }

  .dropdown-menu[data-align="right"] {
    right: 0;
  }

  .dropdown-content {
    padding: 0.25rem 0;
  }

  .hidden {
    display: none;
  }

  /* ThemeToggleによるテーマ切り替え対応 */
  /* No need for :global(.dark) or :global(:not(.dark)) specific overrides here if variables.css is correctly set up */
  /* The component will automatically use the updated global CSS variables based on the html.dark class */
</style>
